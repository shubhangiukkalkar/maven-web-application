def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}

node{
 try{
notifyBuild(String buildStatus = 'STARTED')
echo "the current lines are : ${env.BUILD_NUMBER}"
echo "project name is ${env.JOB_NAME}"
 echo "the build num is : ${env.BUILD_NUMBER}"
 
 properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '5', artifactNumToKeepStr: '5', daysToKeepStr: '5', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([githubPush()])])
 
def mavenHome = tool name: 'maven3.8.5'
//getting code from git
stage ('checkout'){
git branch: 'development', credentialsId: 'caccfa2e-818e-4051-991d-0fa2580f332a', url: 'https://github.com/alexandar33/maven-web-application.git'
}
//building the code by using maven tool
stage ('build'){
sh "$mavenHome/bin/mvn clean package"
}

//exicute sonar report
stage ('create sonar report'){
sh "$mavenHome/bin/mvn sonar:sonar"
}

//create artfacr repo
stage ('create artifact'){
sh "$mavenHome/bin/mvn deploy"
}

//deploying appicatin to tom
stage ('deploying'){
sshagent(['2ada6c2e-cb8a-40e2-996c-352a1de4f0d9']) {
   sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@3.110.134.32:/opt/apache-tomcat-9.0.62/webapps/"
}

}

}//try closing
catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
  } finally {
    // Success or failure, always send notifications
    notifyBuild(currentBuild.result)
  }
}//node closing
